// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: teerpc.proto

#ifndef PROTOBUF_INCLUDED_teerpc_2eproto
#define PROTOBUF_INCLUDED_teerpc_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_teerpc_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_teerpc_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_teerpc_2eproto();
namespace teerpc {
class CypherData;
class CypherDataDefaultTypeInternal;
extern CypherDataDefaultTypeInternal _CypherData_default_instance_;
class RpcError;
class RpcErrorDefaultTypeInternal;
extern RpcErrorDefaultTypeInternal _RpcError_default_instance_;
class TaskReply;
class TaskReplyDefaultTypeInternal;
extern TaskReplyDefaultTypeInternal _TaskReply_default_instance_;
class TaskRequest;
class TaskRequestDefaultTypeInternal;
extern TaskRequestDefaultTypeInternal _TaskRequest_default_instance_;
}  // namespace teerpc
namespace google {
namespace protobuf {
template<> ::teerpc::CypherData* Arena::CreateMaybeMessage<::teerpc::CypherData>(Arena*);
template<> ::teerpc::RpcError* Arena::CreateMaybeMessage<::teerpc::RpcError>(Arena*);
template<> ::teerpc::TaskReply* Arena::CreateMaybeMessage<::teerpc::TaskReply>(Arena*);
template<> ::teerpc::TaskRequest* Arena::CreateMaybeMessage<::teerpc::TaskRequest>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace teerpc {

// ===================================================================

class TaskRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:teerpc.TaskRequest) */ {
 public:
  TaskRequest();
  virtual ~TaskRequest();

  TaskRequest(const TaskRequest& from);

  inline TaskRequest& operator=(const TaskRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TaskRequest(TaskRequest&& from) noexcept
    : TaskRequest() {
    *this = ::std::move(from);
  }

  inline TaskRequest& operator=(TaskRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TaskRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskRequest* internal_default_instance() {
    return reinterpret_cast<const TaskRequest*>(
               &_TaskRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(TaskRequest* other);
  friend void swap(TaskRequest& a, TaskRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TaskRequest* New() const final {
    return CreateMaybeMessage<TaskRequest>(nullptr);
  }

  TaskRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TaskRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TaskRequest& from);
  void MergeFrom(const TaskRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string access_key_id = 2;
  void clear_access_key_id();
  static const int kAccessKeyIdFieldNumber = 2;
  const ::std::string& access_key_id() const;
  void set_access_key_id(const ::std::string& value);
  #if LANG_CXX11
  void set_access_key_id(::std::string&& value);
  #endif
  void set_access_key_id(const char* value);
  void set_access_key_id(const char* value, size_t size);
  ::std::string* mutable_access_key_id();
  ::std::string* release_access_key_id();
  void set_allocated_access_key_id(::std::string* access_key_id);

  // string secret_access_key = 3;
  void clear_secret_access_key();
  static const int kSecretAccessKeyFieldNumber = 3;
  const ::std::string& secret_access_key() const;
  void set_secret_access_key(const ::std::string& value);
  #if LANG_CXX11
  void set_secret_access_key(::std::string&& value);
  #endif
  void set_secret_access_key(const char* value);
  void set_secret_access_key(const char* value, size_t size);
  ::std::string* mutable_secret_access_key();
  ::std::string* release_secret_access_key();
  void set_allocated_secret_access_key(::std::string* secret_access_key);

  // bytes cypher_data = 4;
  void clear_cypher_data();
  static const int kCypherDataFieldNumber = 4;
  const ::std::string& cypher_data() const;
  void set_cypher_data(const ::std::string& value);
  #if LANG_CXX11
  void set_cypher_data(::std::string&& value);
  #endif
  void set_cypher_data(const char* value);
  void set_cypher_data(const void* value, size_t size);
  ::std::string* mutable_cypher_data();
  ::std::string* release_cypher_data();
  void set_allocated_cypher_data(::std::string* cypher_data);

  // int32 task_type = 1;
  void clear_task_type();
  static const int kTaskTypeFieldNumber = 1;
  ::google::protobuf::int32 task_type() const;
  void set_task_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:teerpc.TaskRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr access_key_id_;
  ::google::protobuf::internal::ArenaStringPtr secret_access_key_;
  ::google::protobuf::internal::ArenaStringPtr cypher_data_;
  ::google::protobuf::int32 task_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_teerpc_2eproto;
};
// -------------------------------------------------------------------

class TaskReply final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:teerpc.TaskReply) */ {
 public:
  TaskReply();
  virtual ~TaskReply();

  TaskReply(const TaskReply& from);

  inline TaskReply& operator=(const TaskReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TaskReply(TaskReply&& from) noexcept
    : TaskReply() {
    *this = ::std::move(from);
  }

  inline TaskReply& operator=(TaskReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TaskReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskReply* internal_default_instance() {
    return reinterpret_cast<const TaskReply*>(
               &_TaskReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(TaskReply* other);
  friend void swap(TaskReply& a, TaskReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TaskReply* New() const final {
    return CreateMaybeMessage<TaskReply>(nullptr);
  }

  TaskReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TaskReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TaskReply& from);
  void MergeFrom(const TaskReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes cypher_data = 2;
  void clear_cypher_data();
  static const int kCypherDataFieldNumber = 2;
  const ::std::string& cypher_data() const;
  void set_cypher_data(const ::std::string& value);
  #if LANG_CXX11
  void set_cypher_data(::std::string&& value);
  #endif
  void set_cypher_data(const char* value);
  void set_cypher_data(const void* value, size_t size);
  ::std::string* mutable_cypher_data();
  ::std::string* release_cypher_data();
  void set_allocated_cypher_data(::std::string* cypher_data);

  // .teerpc.RpcError error = 3;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 3;
  const ::teerpc::RpcError& error() const;
  ::teerpc::RpcError* release_error();
  ::teerpc::RpcError* mutable_error();
  void set_allocated_error(::teerpc::RpcError* error);

  // bool success = 1;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:teerpc.TaskReply)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr cypher_data_;
  ::teerpc::RpcError* error_;
  bool success_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_teerpc_2eproto;
};
// -------------------------------------------------------------------

class CypherData final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:teerpc.CypherData) */ {
 public:
  CypherData();
  virtual ~CypherData();

  CypherData(const CypherData& from);

  inline CypherData& operator=(const CypherData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CypherData(CypherData&& from) noexcept
    : CypherData() {
    *this = ::std::move(from);
  }

  inline CypherData& operator=(CypherData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CypherData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CypherData* internal_default_instance() {
    return reinterpret_cast<const CypherData*>(
               &_CypherData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(CypherData* other);
  friend void swap(CypherData& a, CypherData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CypherData* New() const final {
    return CreateMaybeMessage<CypherData>(nullptr);
  }

  CypherData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CypherData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CypherData& from);
  void MergeFrom(const CypherData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CypherData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // bytes public_key = 2;
  void clear_public_key();
  static const int kPublicKeyFieldNumber = 2;
  const ::std::string& public_key() const;
  void set_public_key(const ::std::string& value);
  #if LANG_CXX11
  void set_public_key(::std::string&& value);
  #endif
  void set_public_key(const char* value);
  void set_public_key(const void* value, size_t size);
  ::std::string* mutable_public_key();
  ::std::string* release_public_key();
  void set_allocated_public_key(::std::string* public_key);

  // bytes data = 3;
  void clear_data();
  static const int kDataFieldNumber = 3;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:teerpc.CypherData)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr public_key_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_teerpc_2eproto;
};
// -------------------------------------------------------------------

class RpcError final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:teerpc.RpcError) */ {
 public:
  RpcError();
  virtual ~RpcError();

  RpcError(const RpcError& from);

  inline RpcError& operator=(const RpcError& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RpcError(RpcError&& from) noexcept
    : RpcError() {
    *this = ::std::move(from);
  }

  inline RpcError& operator=(RpcError&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const RpcError& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RpcError* internal_default_instance() {
    return reinterpret_cast<const RpcError*>(
               &_RpcError_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(RpcError* other);
  friend void swap(RpcError& a, RpcError& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RpcError* New() const final {
    return CreateMaybeMessage<RpcError>(nullptr);
  }

  RpcError* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RpcError>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RpcError& from);
  void MergeFrom(const RpcError& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RpcError* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // int32 code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:teerpc.RpcError)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::int32 code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_teerpc_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TaskRequest

// int32 task_type = 1;
inline void TaskRequest::clear_task_type() {
  task_type_ = 0;
}
inline ::google::protobuf::int32 TaskRequest::task_type() const {
  // @@protoc_insertion_point(field_get:teerpc.TaskRequest.task_type)
  return task_type_;
}
inline void TaskRequest::set_task_type(::google::protobuf::int32 value) {
  
  task_type_ = value;
  // @@protoc_insertion_point(field_set:teerpc.TaskRequest.task_type)
}

// string access_key_id = 2;
inline void TaskRequest::clear_access_key_id() {
  access_key_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TaskRequest::access_key_id() const {
  // @@protoc_insertion_point(field_get:teerpc.TaskRequest.access_key_id)
  return access_key_id_.GetNoArena();
}
inline void TaskRequest::set_access_key_id(const ::std::string& value) {
  
  access_key_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:teerpc.TaskRequest.access_key_id)
}
#if LANG_CXX11
inline void TaskRequest::set_access_key_id(::std::string&& value) {
  
  access_key_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:teerpc.TaskRequest.access_key_id)
}
#endif
inline void TaskRequest::set_access_key_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  access_key_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:teerpc.TaskRequest.access_key_id)
}
inline void TaskRequest::set_access_key_id(const char* value, size_t size) {
  
  access_key_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:teerpc.TaskRequest.access_key_id)
}
inline ::std::string* TaskRequest::mutable_access_key_id() {
  
  // @@protoc_insertion_point(field_mutable:teerpc.TaskRequest.access_key_id)
  return access_key_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskRequest::release_access_key_id() {
  // @@protoc_insertion_point(field_release:teerpc.TaskRequest.access_key_id)
  
  return access_key_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskRequest::set_allocated_access_key_id(::std::string* access_key_id) {
  if (access_key_id != nullptr) {
    
  } else {
    
  }
  access_key_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), access_key_id);
  // @@protoc_insertion_point(field_set_allocated:teerpc.TaskRequest.access_key_id)
}

// string secret_access_key = 3;
inline void TaskRequest::clear_secret_access_key() {
  secret_access_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TaskRequest::secret_access_key() const {
  // @@protoc_insertion_point(field_get:teerpc.TaskRequest.secret_access_key)
  return secret_access_key_.GetNoArena();
}
inline void TaskRequest::set_secret_access_key(const ::std::string& value) {
  
  secret_access_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:teerpc.TaskRequest.secret_access_key)
}
#if LANG_CXX11
inline void TaskRequest::set_secret_access_key(::std::string&& value) {
  
  secret_access_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:teerpc.TaskRequest.secret_access_key)
}
#endif
inline void TaskRequest::set_secret_access_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  secret_access_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:teerpc.TaskRequest.secret_access_key)
}
inline void TaskRequest::set_secret_access_key(const char* value, size_t size) {
  
  secret_access_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:teerpc.TaskRequest.secret_access_key)
}
inline ::std::string* TaskRequest::mutable_secret_access_key() {
  
  // @@protoc_insertion_point(field_mutable:teerpc.TaskRequest.secret_access_key)
  return secret_access_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskRequest::release_secret_access_key() {
  // @@protoc_insertion_point(field_release:teerpc.TaskRequest.secret_access_key)
  
  return secret_access_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskRequest::set_allocated_secret_access_key(::std::string* secret_access_key) {
  if (secret_access_key != nullptr) {
    
  } else {
    
  }
  secret_access_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), secret_access_key);
  // @@protoc_insertion_point(field_set_allocated:teerpc.TaskRequest.secret_access_key)
}

// bytes cypher_data = 4;
inline void TaskRequest::clear_cypher_data() {
  cypher_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TaskRequest::cypher_data() const {
  // @@protoc_insertion_point(field_get:teerpc.TaskRequest.cypher_data)
  return cypher_data_.GetNoArena();
}
inline void TaskRequest::set_cypher_data(const ::std::string& value) {
  
  cypher_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:teerpc.TaskRequest.cypher_data)
}
#if LANG_CXX11
inline void TaskRequest::set_cypher_data(::std::string&& value) {
  
  cypher_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:teerpc.TaskRequest.cypher_data)
}
#endif
inline void TaskRequest::set_cypher_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cypher_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:teerpc.TaskRequest.cypher_data)
}
inline void TaskRequest::set_cypher_data(const void* value, size_t size) {
  
  cypher_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:teerpc.TaskRequest.cypher_data)
}
inline ::std::string* TaskRequest::mutable_cypher_data() {
  
  // @@protoc_insertion_point(field_mutable:teerpc.TaskRequest.cypher_data)
  return cypher_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskRequest::release_cypher_data() {
  // @@protoc_insertion_point(field_release:teerpc.TaskRequest.cypher_data)
  
  return cypher_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskRequest::set_allocated_cypher_data(::std::string* cypher_data) {
  if (cypher_data != nullptr) {
    
  } else {
    
  }
  cypher_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cypher_data);
  // @@protoc_insertion_point(field_set_allocated:teerpc.TaskRequest.cypher_data)
}

// -------------------------------------------------------------------

// TaskReply

// bool success = 1;
inline void TaskReply::clear_success() {
  success_ = false;
}
inline bool TaskReply::success() const {
  // @@protoc_insertion_point(field_get:teerpc.TaskReply.success)
  return success_;
}
inline void TaskReply::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:teerpc.TaskReply.success)
}

// bytes cypher_data = 2;
inline void TaskReply::clear_cypher_data() {
  cypher_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TaskReply::cypher_data() const {
  // @@protoc_insertion_point(field_get:teerpc.TaskReply.cypher_data)
  return cypher_data_.GetNoArena();
}
inline void TaskReply::set_cypher_data(const ::std::string& value) {
  
  cypher_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:teerpc.TaskReply.cypher_data)
}
#if LANG_CXX11
inline void TaskReply::set_cypher_data(::std::string&& value) {
  
  cypher_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:teerpc.TaskReply.cypher_data)
}
#endif
inline void TaskReply::set_cypher_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cypher_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:teerpc.TaskReply.cypher_data)
}
inline void TaskReply::set_cypher_data(const void* value, size_t size) {
  
  cypher_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:teerpc.TaskReply.cypher_data)
}
inline ::std::string* TaskReply::mutable_cypher_data() {
  
  // @@protoc_insertion_point(field_mutable:teerpc.TaskReply.cypher_data)
  return cypher_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskReply::release_cypher_data() {
  // @@protoc_insertion_point(field_release:teerpc.TaskReply.cypher_data)
  
  return cypher_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskReply::set_allocated_cypher_data(::std::string* cypher_data) {
  if (cypher_data != nullptr) {
    
  } else {
    
  }
  cypher_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cypher_data);
  // @@protoc_insertion_point(field_set_allocated:teerpc.TaskReply.cypher_data)
}

// .teerpc.RpcError error = 3;
inline bool TaskReply::has_error() const {
  return this != internal_default_instance() && error_ != nullptr;
}
inline void TaskReply::clear_error() {
  if (GetArenaNoVirtual() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
}
inline const ::teerpc::RpcError& TaskReply::error() const {
  const ::teerpc::RpcError* p = error_;
  // @@protoc_insertion_point(field_get:teerpc.TaskReply.error)
  return p != nullptr ? *p : *reinterpret_cast<const ::teerpc::RpcError*>(
      &::teerpc::_RpcError_default_instance_);
}
inline ::teerpc::RpcError* TaskReply::release_error() {
  // @@protoc_insertion_point(field_release:teerpc.TaskReply.error)
  
  ::teerpc::RpcError* temp = error_;
  error_ = nullptr;
  return temp;
}
inline ::teerpc::RpcError* TaskReply::mutable_error() {
  
  if (error_ == nullptr) {
    auto* p = CreateMaybeMessage<::teerpc::RpcError>(GetArenaNoVirtual());
    error_ = p;
  }
  // @@protoc_insertion_point(field_mutable:teerpc.TaskReply.error)
  return error_;
}
inline void TaskReply::set_allocated_error(::teerpc::RpcError* error) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete error_;
  }
  if (error) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      error = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:teerpc.TaskReply.error)
}

// -------------------------------------------------------------------

// CypherData

// bytes key = 1;
inline void CypherData::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CypherData::key() const {
  // @@protoc_insertion_point(field_get:teerpc.CypherData.key)
  return key_.GetNoArena();
}
inline void CypherData::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:teerpc.CypherData.key)
}
#if LANG_CXX11
inline void CypherData::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:teerpc.CypherData.key)
}
#endif
inline void CypherData::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:teerpc.CypherData.key)
}
inline void CypherData::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:teerpc.CypherData.key)
}
inline ::std::string* CypherData::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:teerpc.CypherData.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CypherData::release_key() {
  // @@protoc_insertion_point(field_release:teerpc.CypherData.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CypherData::set_allocated_key(::std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:teerpc.CypherData.key)
}

// bytes public_key = 2;
inline void CypherData::clear_public_key() {
  public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CypherData::public_key() const {
  // @@protoc_insertion_point(field_get:teerpc.CypherData.public_key)
  return public_key_.GetNoArena();
}
inline void CypherData::set_public_key(const ::std::string& value) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:teerpc.CypherData.public_key)
}
#if LANG_CXX11
inline void CypherData::set_public_key(::std::string&& value) {
  
  public_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:teerpc.CypherData.public_key)
}
#endif
inline void CypherData::set_public_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:teerpc.CypherData.public_key)
}
inline void CypherData::set_public_key(const void* value, size_t size) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:teerpc.CypherData.public_key)
}
inline ::std::string* CypherData::mutable_public_key() {
  
  // @@protoc_insertion_point(field_mutable:teerpc.CypherData.public_key)
  return public_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CypherData::release_public_key() {
  // @@protoc_insertion_point(field_release:teerpc.CypherData.public_key)
  
  return public_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CypherData::set_allocated_public_key(::std::string* public_key) {
  if (public_key != nullptr) {
    
  } else {
    
  }
  public_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_key);
  // @@protoc_insertion_point(field_set_allocated:teerpc.CypherData.public_key)
}

// bytes data = 3;
inline void CypherData::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CypherData::data() const {
  // @@protoc_insertion_point(field_get:teerpc.CypherData.data)
  return data_.GetNoArena();
}
inline void CypherData::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:teerpc.CypherData.data)
}
#if LANG_CXX11
inline void CypherData::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:teerpc.CypherData.data)
}
#endif
inline void CypherData::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:teerpc.CypherData.data)
}
inline void CypherData::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:teerpc.CypherData.data)
}
inline ::std::string* CypherData::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:teerpc.CypherData.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CypherData::release_data() {
  // @@protoc_insertion_point(field_release:teerpc.CypherData.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CypherData::set_allocated_data(::std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:teerpc.CypherData.data)
}

// -------------------------------------------------------------------

// RpcError

// int32 code = 1;
inline void RpcError::clear_code() {
  code_ = 0;
}
inline ::google::protobuf::int32 RpcError::code() const {
  // @@protoc_insertion_point(field_get:teerpc.RpcError.code)
  return code_;
}
inline void RpcError::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:teerpc.RpcError.code)
}

// string message = 2;
inline void RpcError::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RpcError::message() const {
  // @@protoc_insertion_point(field_get:teerpc.RpcError.message)
  return message_.GetNoArena();
}
inline void RpcError::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:teerpc.RpcError.message)
}
#if LANG_CXX11
inline void RpcError::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:teerpc.RpcError.message)
}
#endif
inline void RpcError::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:teerpc.RpcError.message)
}
inline void RpcError::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:teerpc.RpcError.message)
}
inline ::std::string* RpcError::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:teerpc.RpcError.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RpcError::release_message() {
  // @@protoc_insertion_point(field_release:teerpc.RpcError.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RpcError::set_allocated_message(::std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:teerpc.RpcError.message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace teerpc

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_teerpc_2eproto
